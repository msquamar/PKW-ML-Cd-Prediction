import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import joblib
import xgboost as xgb
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# === Load model ===
def load_model(model_name):
    if model_name == "XGBoost":
        model = xgb.XGBRegressor()
        model.load_model("xgb_model.json") 
        
    elif model_name == "SVR_RF": 
        svr_hyb_model= joblib.load("svr_hyb.pkl") 
        rf_hyb_model= joblib.load("rf_hyb.pkl") 
        return (svr_hyb_model,rf_hyb_model)  
        
    else:
        model = joblib.load(f"{model_name.lower()}_model.pkl")
    return model

# === Predict CPKW ===
def predict_cpkw():
    try:
        l_w = float(lw_entry.get())
        h_p = float(hp_entry.get())
        wi_wo = float(wiwo_entry.get())
        p_wu = float(pwu_entry.get())

        if any(v <= 0 for v in [l_w, h_p, wi_wo, p_wu]):
            messagebox.showerror("Invalid Input", "All values must be positive numbers.")
            return

        input_df = pd.DataFrame({
            'L/W': [l_w],
            'H/P': [h_p],
            'Wi/Wo': [wi_wo],
            'P/Wu': [p_wu]
        })

        model_name = model_select.get()
        model = load_model(model_name)  
        if model_name == "SVR_RF": 
            svr_hyb_model,rf_hyb_model= model 
            svr_hyb_pred= svr_hyb_model.predict(input_df)[0] 
            rf_hyb_pred= rf_hyb_model.predict(input_df)[0] 
            cpkw = (svr_hyb_pred+rf_hyb_pred)/2  

        else: 
            cpkw = model.predict(input_df)[0] 

        result_text.set_text(f"Predicted $C_{{PKW}}$: {cpkw:.4f}")
        canvas.draw()

    except ValueError:
        messagebox.showerror("Input Error", "Please enter valid numeric values.")
    except Exception as e:
        messagebox.showerror("Error", f"Something went wrong:\n{str(e)}")

# === Save prediction ===
def save_prediction():
    try:
        cpkw_text = result_text.get_text().replace("Predicted $C_{PKW}$: ", "")
        
        if "---" in cpkw_text or cpkw_text.strip() == "":
            messagebox.showwarning("Warning", "Please predict CPKW before saving.")
            return

        l_w = float(lw_entry.get())
        h_p = float(hp_entry.get())
        wi_wo = float(wiwo_entry.get())
        p_wu = float(pwu_entry.get())
        model_name = model_select.get()

        df = pd.DataFrame([{
            'L/W': l_w,
            'H/P': h_p,
            'Wi/Wo': wi_wo,
            'P/Wu': p_wu,
            'Model': model_name,
            'Predicted CPKW': float(cpkw_text)
        }])

        df.to_csv("CPKW_predictions.csv", mode='a', index=False,
                  header=not pd.io.common.file_exists("CPKW_predictions.csv"))

        messagebox.showinfo("Saved", "Prediction saved to CPKW_predictions.csv")

    except Exception as e:
        messagebox.showerror("Save Error", f"Could not save prediction:\n{e}")

# === Reset fields ===
def reset_fields():
    lw_entry.delete(0, tk.END)
    hp_entry.delete(0, tk.END)
    wiwo_entry.delete(0, tk.END)
    pwu_entry.delete(0, tk.END)
    result_text.set_text(r"Predicted $C_{PKW}$: ---")
    canvas.draw()
    model_select.set("SVR")

# === GUI SETUP ===
root = tk.Tk()
root.title("PKW Discharge Coefficient Predictor")
root.geometry("700x600")
root.option_add("*Font", "Arial 10")

tk.Label(root, text="Discharge Coefficient Predictor of Type-A PKW", font=("Arial", 14, "bold")).pack(pady=10)

input_frame = ttk.LabelFrame(root, text="Enter Input Parameters")
input_frame.pack(padx=20, pady=10, fill="both")

ttk.Label(input_frame, text="L/W ratio:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
lw_entry = ttk.Entry(input_frame)
lw_entry.grid(row=0, column=1, padx=10, pady=5)

ttk.Label(input_frame, text="H/P ratio:").grid(row=1, column=0, padx=10, pady=5, sticky="e")
hp_entry = ttk.Entry(input_frame)
hp_entry.grid(row=1, column=1, padx=10, pady=5)

ttk.Label(input_frame, text="Wi/Wo ratio:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
wiwo_entry = ttk.Entry(input_frame)
wiwo_entry.grid(row=2, column=1, padx=10, pady=5)

ttk.Label(input_frame, text="P/Wu ratio:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
pwu_entry = ttk.Entry(input_frame)
pwu_entry.grid(row=3, column=1, padx=10, pady=5)

input_frame.columnconfigure(1, weight=1)

ttk.Label(root, text="Select ML Model:").pack(pady=(10, 2))
model_select = ttk.Combobox(root, values=["SVR", "RandomForest", "XGBoost", "SVR_RF"], state="readonly")
model_select.set("SVR")
model_select.pack()

ttk.Button(root, text="Predict CPKW", command=predict_cpkw).pack(pady=8, ipadx=10, ipady=4)
ttk.Button(root, text="Save Prediction", command=save_prediction).pack(pady=5, ipadx=10, ipady=4)
ttk.Button(root, text="Reset", command=reset_fields).pack(pady=5, ipadx=10, ipady=4)

fig = plt.Figure(figsize=(3, 1))
ax = fig.add_subplot(111)
ax.axis('off')
result_text = ax.text(0.5, 0.5, r"Predicted $C_{PKW}$: ---", fontsize=14, ha='center', va='center')

canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().pack(pady=10)

tk.Label(root, text="Developed by [MS Quamar] | [IIT Roorkee, India]", font=("Arial", 9)).pack(side="bottom", pady=5)

root.mainloop()
