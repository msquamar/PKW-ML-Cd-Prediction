# SVR implementation with full evaluation, plots, and Excel export

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.svm import SVR
import os

# === Evaluation Function ===
def evaluate_model_performance(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    sse = np.sum((y_true - y_pred) ** 2)
    cc = np.corrcoef(y_true, y_pred)[0, 1]
    mean_actual = np.mean(y_true)
    mae_percent = (mae / mean_actual) * 100
    rmse_percent = (rmse / mean_actual) * 100
    nse = 1 - (np.sum((y_true - y_pred) ** 2) / np.sum((y_true - np.mean(y_true)) ** 2))
    r2 = r2_score(y_true, y_pred)

    return pd.DataFrame({
        "MAE": [mae],
        "MAE (%)": [mae_percent],
        "MAPE (%)": [mape],
        "SSE": [sse],
        "MSE": [mse],
        "RMSE": [rmse],
        "RMSE (%)": [rmse_percent],
        "R (CC)": [cc],
        "R²": [r2],
        "E² (NSE)": [nse]
    })

# === Load Data ===
data = pd.read_excel("Data_Reg.xlsx")
X = data[['L/W', 'H/P', 'Wi/Wo', 'P/Wu']]
y = data['CPKW']

# === Train-Test Split ===
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === Scale Inputs ===
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# === Train SVR ===
svr_model = SVR(kernel='rbf', C=100, epsilon=0.01)
svr_model.fit(X_train_scaled, y_train)

# === Predictions ===
y_train_pred = svr_model.predict(X_train_scaled)
y_test_pred = svr_model.predict(X_test_scaled)

# === Results DataFrames ===
train_results = X_train.copy()
train_results['Actual_CPKW'] = y_train.values
train_results['Predicted_CPKW'] = y_train_pred
train_results['Residual'] = y_train.values - y_train_pred
train_results['Abs_Error'] = np.abs(train_results['Residual'])

test_results = X_test.copy()
test_results['Actual_CPKW'] = y_test.values
test_results['Predicted_CPKW'] = y_test_pred
test_results['Residual'] = y_test.values - y_test_pred
test_results['Abs_Error'] = np.abs(test_results['Residual'])

# === Evaluate ===
train_perf = evaluate_model_performance(y_train.values, y_train_pred)
test_perf = evaluate_model_performance(y_test.values, y_test_pred)

# === Save ===
os.makedirs("E:/RESULTS OF ML", exist_ok=True)
save_path = "E:/RESULTS OF ML/R_Data_Reg_SVR.xlsx"
with pd.ExcelWriter(save_path) as writer:
    train_perf.to_excel(writer, sheet_name="Train_Performance", index=False)
    test_perf.to_excel(writer, sheet_name="Test_Performance", index=False)
    train_results.to_excel(writer, sheet_name="Train_Actual_vs_Predicted", index=False)
    test_results.to_excel(writer, sheet_name="Test_Actual_vs_Predicted", index=False)
    train_results[['Residual', 'Abs_Error']].to_excel(writer, sheet_name="Train_Residuals", index=False)
    test_results[['Residual', 'Abs_Error']].to_excel(writer, sheet_name="Test_Residuals", index=False)

# === Plot ===
plt.figure(figsize=(6, 6))
plt.scatter(y_test, y_test_pred, color='darkgreen')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
plt.xlabel('Actual CPKW')
plt.ylabel('Predicted CPKW')
plt.title('SVR: Actual vs Predicted (Test)')
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(6, 4))
plt.scatter(range(len(y_test_pred)), y_test - y_test_pred, color='orange')
plt.axhline(0, color='gray', linestyle='--')
plt.title("SVR: Residual Plot (Test Set)")
plt.xlabel("Sample Index")
plt.ylabel("Residual")
plt.grid(True)
plt.tight_layout()
plt.show()

print(f"✅ SVR results saved to: {save_path}")
